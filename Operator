#include <iostream>
using namespace std;

class Complex {
private:
    float real;
    float imag;

public:
    // Default constructor
    Complex() : real(0), imag(0) {}

    // Parameterized constructor
    Complex(float r, float i) : real(r), imag(i) {}

    // Overload + operator
    Complex operator+ (const Complex& c) {
        Complex temp;
        temp.real = real + c.real;
        temp.imag = imag + c.imag;
        return temp;
    }

    // Overload * operator
    Complex operator* (const Complex& c) {
        Complex temp;
        temp.real = real * c.real - imag * c.imag;
        temp.imag = real * c.imag + imag * c.real;
        return temp;
    }

    // Display function to print complex number
    void show(void) const {
        cout << real << " + " << imag << "i\n";
    }

    // Friend functions for input and output
    friend istream& operator>>(istream&, Complex&);
    friend ostream& operator<<(ostream&, const Complex&);
};

// Input stream operator overloading
istream& operator >> (istream &in, Complex &obj) {
    cout << "Enter the real part: ";
    in >> obj.real;
    cout << "Enter the imaginary part: ";
    in >> obj.imag;
    return in;
}

// Output stream operator overloading
ostream& operator << (ostream &out, const Complex &obj) {
    out << obj.real << " + " << obj.imag << "i";
    return out;
}

int main() {
    Complex c1, c2, c3, c4;
    
    // Take input for two complex numbers
    cout << "Enter complex number c1:\n";
    cin >> c1;
    cout << "Enter complex number c2:\n";
    cin >> c2;

    // Perform operations
    c3 = c1 + c2;  // Addition
    c4 = c1 * c2;  // Multiplication

    // Output results
    cout << "c1 = " << c1 << endl;
    cout << "c2 = " << c2 << endl;
    cout << "c3 (c1 + c2) = " << c3 << endl;
    cout << "c4 (c1 * c2) = " << c4 << endl;

    return 0;
}
